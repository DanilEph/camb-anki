{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Documents/my-repository/web/cambridge-anki/extention/src/components/ContentEditable/ContentEditable.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ContentEditable = _ref => {\n  let {\n    component,\n    onContentChange,\n    onInput = () => {},\n    ...other\n  } = _ref;\n  const Component = component || 'div';\n\n  const handleChange = e => {\n    const imgMaxWidth = e.currentTarget.clientWidth - 30;\n    const firstText = e.currentTarget.innerText;\n    const nodes = e.currentTarget.getElementsByTagName('div');\n    let parsedNodes = [];\n\n    for (let i = 0; i < nodes.length; i++) {\n      var _currentNode$children;\n\n      const currentNode = nodes[i];\n      const imgs = [];\n      let text;\n\n      if (((_currentNode$children = currentNode.children[0]) === null || _currentNode$children === void 0 ? void 0 : _currentNode$children.tagName) !== 'BR') {\n        const imgElements = currentNode.getElementsByTagName('img');\n\n        if (imgElements) {\n          for (let i = 0; i < imgElements.length; i++) {\n            const img = imgElements[i];\n            if (img.width > imgMaxWidth) img.width = imgMaxWidth;\n            imgs.push(img.outerHTML);\n          }\n        } else if (currentNode.textContent) {\n          text = currentNode.textContent;\n        }\n      }\n\n      parsedNodes = [...imgs];\n      text && parsedNodes.push(text);\n    }\n\n    console.log(nodes);\n    console.log(firstText);\n    console.log(parsedNodes);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Component, {\n    contentEditable: true,\n    onInput: e => {\n      handleChange(e);\n      onInput(e);\n    },\n    ...other\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ContentEditable;\nexport default ContentEditable;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContentEditable\");","map":{"version":3,"names":["React","ContentEditable","component","onContentChange","onInput","other","Component","handleChange","e","imgMaxWidth","currentTarget","clientWidth","firstText","innerText","nodes","getElementsByTagName","parsedNodes","i","length","currentNode","imgs","text","children","tagName","imgElements","img","width","push","outerHTML","textContent","console","log"],"sources":["/Users/macbookpro/Documents/my-repository/web/cambridge-anki/extention/src/components/ContentEditable/ContentEditable.tsx"],"sourcesContent":["import React, { FC, ReactNode } from 'react';\nimport { Type } from 'typescript';\n\ntype IContentEditableProps<T extends React.ElementType> = {\n  component?: T;\n  onContentChange?: (event: ReactNode[]) => void;\n} & React.ComponentPropsWithoutRef<T>;\n\nconst ContentEditable = <T extends React.ElementType = 'div',>({ component, onContentChange, onInput = () => {}, ...other }: IContentEditableProps<T>) => {\n  const Component = component || 'div';\n\n  const handleChange = (e: React.FormEvent<HTMLDivElement>) => {\n    const imgMaxWidth = e.currentTarget.clientWidth - 30;\n    const firstText = e.currentTarget.innerText;\n    const nodes = e.currentTarget.getElementsByTagName('div');\n    let parsedNodes: string[] = [];\n\n    for (let i = 0; i < nodes.length; i++) {\n      const currentNode = nodes[i];\n      const imgs: string[] = [];\n      let text: string | undefined;\n\n      if (currentNode.children[0]?.tagName !== 'BR') {\n        const imgElements = currentNode.getElementsByTagName('img');\n        if (imgElements) {\n          for (let i = 0; i < imgElements.length; i++) {\n            const img = imgElements[i];\n            if (img.width > imgMaxWidth) img.width = imgMaxWidth;\n            imgs.push(img.outerHTML);\n          }\n        } else if (currentNode.textContent) {\n          text = currentNode.textContent;\n        }\n\n      }\n      parsedNodes = [...imgs];\n      text && parsedNodes.push(text);\n    }\n    console.log(nodes);\n    console.log(firstText);\n    console.log(parsedNodes);\n  }\n\n  return (\n    <Component\n      contentEditable\n      onInput={(e) => {handleChange(e); onInput(e)}}\n      {...other}\n    />\n  )\n};\n\nexport default ContentEditable;"],"mappings":";AAAA,OAAOA,KAAP,MAAqC,OAArC;;;AAQA,MAAMC,eAAe,GAAG,QAAkI;EAAA,IAA3F;IAAEC,SAAF;IAAaC,eAAb;IAA8BC,OAAO,GAAG,MAAM,CAAE,CAAhD;IAAkD,GAAGC;EAArD,CAA2F;EACxJ,MAAMC,SAAS,GAAGJ,SAAS,IAAI,KAA/B;;EAEA,MAAMK,YAAY,GAAIC,CAAD,IAAwC;IAC3D,MAAMC,WAAW,GAAGD,CAAC,CAACE,aAAF,CAAgBC,WAAhB,GAA8B,EAAlD;IACA,MAAMC,SAAS,GAAGJ,CAAC,CAACE,aAAF,CAAgBG,SAAlC;IACA,MAAMC,KAAK,GAAGN,CAAC,CAACE,aAAF,CAAgBK,oBAAhB,CAAqC,KAArC,CAAd;IACA,IAAIC,WAAqB,GAAG,EAA5B;;IAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACI,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;MAAA;;MACrC,MAAME,WAAW,GAAGL,KAAK,CAACG,CAAD,CAAzB;MACA,MAAMG,IAAc,GAAG,EAAvB;MACA,IAAIC,IAAJ;;MAEA,IAAI,0BAAAF,WAAW,CAACG,QAAZ,CAAqB,CAArB,iFAAyBC,OAAzB,MAAqC,IAAzC,EAA+C;QAC7C,MAAMC,WAAW,GAAGL,WAAW,CAACJ,oBAAZ,CAAiC,KAAjC,CAApB;;QACA,IAAIS,WAAJ,EAAiB;UACf,KAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGO,WAAW,CAACN,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;YAC3C,MAAMQ,GAAG,GAAGD,WAAW,CAACP,CAAD,CAAvB;YACA,IAAIQ,GAAG,CAACC,KAAJ,GAAYjB,WAAhB,EAA6BgB,GAAG,CAACC,KAAJ,GAAYjB,WAAZ;YAC7BW,IAAI,CAACO,IAAL,CAAUF,GAAG,CAACG,SAAd;UACD;QACF,CAND,MAMO,IAAIT,WAAW,CAACU,WAAhB,EAA6B;UAClCR,IAAI,GAAGF,WAAW,CAACU,WAAnB;QACD;MAEF;;MACDb,WAAW,GAAG,CAAC,GAAGI,IAAJ,CAAd;MACAC,IAAI,IAAIL,WAAW,CAACW,IAAZ,CAAiBN,IAAjB,CAAR;IACD;;IACDS,OAAO,CAACC,GAAR,CAAYjB,KAAZ;IACAgB,OAAO,CAACC,GAAR,CAAYnB,SAAZ;IACAkB,OAAO,CAACC,GAAR,CAAYf,WAAZ;EACD,CA9BD;;EAgCA,oBACE,QAAC,SAAD;IACE,eAAe,MADjB;IAEE,OAAO,EAAGR,CAAD,IAAO;MAACD,YAAY,CAACC,CAAD,CAAZ;MAAiBJ,OAAO,CAACI,CAAD,CAAP;IAAW,CAF/C;IAAA,GAGMH;EAHN;IAAA;IAAA;IAAA;EAAA,QADF;AAOD,CA1CD;;KAAMJ,e;AA4CN,eAAeA,eAAf"},"metadata":{},"sourceType":"module"}