{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Documents/my-repository/web/cambridge-anki/extention/src/components/ContentEditable/ContentEditable.tsx\";\nimport React from 'react';\nimport uniqid from 'uniqid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ContentEditable = _ref => {\n  let {\n    contentValue,\n    id: oldId,\n    component,\n    onContentChange = () => {},\n    onInput = () => {},\n    ...other\n  } = _ref;\n  const Component = component || 'div';\n  const id = uniqid('content-editable-');\n\n  const resetNodes = selector => {\n    const element = document.querySelector(selector);\n    if (element) element.innerHTML = '';\n  };\n\n  const setContent = (selector, newContent) => {\n    const element = document.querySelector(selector);\n\n    if (element && newContent) {\n      element.innerHTML = '';\n      newContent.forEach(node => {\n        const wrapedNode = document.createElement('div');\n        wrapedNode.append(node);\n        element.append(wrapedNode);\n      });\n      console.log('Childrens have been appended!');\n    } else if (element && !newContent) {\n      element.innerHTML = '';\n      console.log('Element has been cleaned');\n    }\n  }; // useEffect(() => {\n  //   setContent(`#${id}`, contentValue);\n  // }, [contentValue])\n\n\n  const handleChange = e => {\n    var _e$currentTarget$chil, _e$currentTarget$chil2, _e$currentTarget$chil3;\n\n    const imgMaxWidth = e.currentTarget.clientWidth - 30;\n    const allImg = e.currentTarget.getElementsByTagName('img');\n\n    for (let i = 0; i < allImg.length; i++) {\n      const img = allImg[i];\n      if (img.width > imgMaxWidth) img.width = imgMaxWidth;\n    }\n\n    let parsedNodes = [];\n    const firstText = ((_e$currentTarget$chil = e.currentTarget.childNodes[0]) === null || _e$currentTarget$chil === void 0 ? void 0 : _e$currentTarget$chil.nodeName) === '#text' ? (_e$currentTarget$chil2 = e.currentTarget.childNodes[0]) === null || _e$currentTarget$chil2 === void 0 ? void 0 : _e$currentTarget$chil2.textContent : undefined;\n    const firstImg = ((_e$currentTarget$chil3 = e.currentTarget.children[0]) === null || _e$currentTarget$chil3 === void 0 ? void 0 : _e$currentTarget$chil3.tagName) === 'IMG' ? e.currentTarget.getElementsByTagName('img')[0].outerHTML : undefined;\n    const nodes = e.currentTarget.getElementsByTagName('div');\n    firstImg && parsedNodes.push(firstImg);\n    firstText && parsedNodes.push(firstText);\n\n    for (let i = 0; i < nodes.length; i++) {\n      var _currentNode$children, _currentNode$children2;\n\n      const currentNode = nodes[i];\n      let imgs = [];\n      let text;\n\n      if (((_currentNode$children = currentNode.children[0]) === null || _currentNode$children === void 0 ? void 0 : _currentNode$children.tagName) === 'BR' && currentNode.childElementCount === 1) {\n        continue;\n      } else if (((_currentNode$children2 = currentNode.children[0]) === null || _currentNode$children2 === void 0 ? void 0 : _currentNode$children2.tagName) === 'IMG') {\n        const imgElements = currentNode.getElementsByTagName('img'); // img = (currentImg?.outerHTML);\n\n        for (let i = 0; i < imgElements.length; i++) {\n          const img = imgElements[i];\n          if (img.width > imgMaxWidth) img.width = imgMaxWidth;\n          imgs.push(img.outerHTML);\n        }\n      } else if (currentNode.textContent) {\n        text = currentNode.textContent;\n      }\n\n      parsedNodes = [...parsedNodes, ...imgs];\n      text && parsedNodes.push(text);\n    }\n\n    console.log(parsedNodes);\n    onContentChange(parsedNodes); // setContent(`#${id}`, contentValue);\n    // resetNodes(`#${id}`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Component, {\n    id: id,\n    contentEditable: true,\n    onInput: e => {\n      handleChange(e);\n      onInput(e);\n    },\n    ...other\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ContentEditable;\nexport default ContentEditable;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContentEditable\");","map":{"version":3,"names":["React","uniqid","ContentEditable","contentValue","id","oldId","component","onContentChange","onInput","other","Component","resetNodes","selector","element","document","querySelector","innerHTML","setContent","newContent","forEach","node","wrapedNode","createElement","append","console","log","handleChange","e","imgMaxWidth","currentTarget","clientWidth","allImg","getElementsByTagName","i","length","img","width","parsedNodes","firstText","childNodes","nodeName","textContent","undefined","firstImg","children","tagName","outerHTML","nodes","push","currentNode","imgs","text","childElementCount","imgElements"],"sources":["/Users/macbookpro/Documents/my-repository/web/cambridge-anki/extention/src/components/ContentEditable/ContentEditable.tsx"],"sourcesContent":["import React, { FC, ReactNode, useEffect, useRef } from 'react';\nimport { Type } from 'typescript';\nimport uniqid from 'uniqid';\nimport ReactHTMLParser from 'react-html-parser';\n\nexport type IContentEditableProps<T extends React.ElementType> = {\n  component?: T;\n  onContentChange?: (event: string[]) => void;\n  contentValue?: string[];\n} & React.ComponentPropsWithoutRef<T>;\n\nconst ContentEditable = <T extends React.ElementType = 'div',>({ contentValue, id: oldId, component, onContentChange = () => {}, onInput = () => {}, ...other }: IContentEditableProps<T>) => {\n  const Component = component || 'div';\n  const id = uniqid('content-editable-');\n\n  const resetNodes = (selector: string) => {\n    const element = document.querySelector(selector);\n    if (element) element.innerHTML = '';\n  }\n\n  const setContent = (selector: string, newContent?: string[] | undefined) => {\n    const element = document.querySelector(selector);\n    if (element && newContent) {\n      element.innerHTML = '';\n      newContent.forEach((node) => {\n        const wrapedNode = document.createElement('div')\n        wrapedNode.append(node);\n        element.append(wrapedNode);\n      })\n      console.log('Childrens have been appended!')\n    } else if (element && !newContent) {\n      element.innerHTML = '';\n      console.log('Element has been cleaned')\n    }\n  }\n\n  // useEffect(() => {\n  //   setContent(`#${id}`, contentValue);\n  // }, [contentValue])\n\n  const handleChange = (e: React.FormEvent<HTMLDivElement>) => {\n    const imgMaxWidth = e.currentTarget.clientWidth - 30;\n    const allImg = e.currentTarget.getElementsByTagName('img');\n    for (let i = 0; i < allImg.length; i++) {\n      const img = allImg[i];\n      if (img.width > imgMaxWidth) img.width = imgMaxWidth;\n    }\n\n    let parsedNodes: string[] = [];\n    const firstText = e.currentTarget.childNodes[0]?.nodeName === '#text' ? e.currentTarget.childNodes[0]?.textContent : undefined;\n    const firstImg = e.currentTarget.children[0]?.tagName === 'IMG' ? e.currentTarget.getElementsByTagName('img')[0].outerHTML : undefined;\n    const nodes = e.currentTarget.getElementsByTagName('div');\n    \n    firstImg && parsedNodes.push(firstImg);\n    firstText && parsedNodes.push(firstText);\n\n    for (let i = 0; i < nodes.length; i++) {\n      const currentNode = nodes[i];\n      let imgs: string[] = [];\n      let text: string | undefined;\n\n      if (currentNode.children[0]?.tagName === 'BR' && currentNode.childElementCount === 1) {\n        continue;\n      } else if (currentNode.children[0]?.tagName === 'IMG') {\n        const imgElements = currentNode.getElementsByTagName('img');\n        // img = (currentImg?.outerHTML);\n        for (let i = 0; i < imgElements.length; i++) {\n          const img = imgElements[i];\n          if (img.width > imgMaxWidth) img.width = imgMaxWidth;\n          imgs.push(img.outerHTML);\n        }\n      } else if (currentNode.textContent) {\n        text = currentNode.textContent;\n      }\n      parsedNodes = [...parsedNodes,  ...imgs];\n      text && parsedNodes.push(text);\n    }\n    console.log(parsedNodes);\n    onContentChange(parsedNodes);\n    // setContent(`#${id}`, contentValue);\n    // resetNodes(`#${id}`);\n  }\n\n  return (\n    <Component\n      id={id}\n      contentEditable\n      onInput={(e) => {handleChange(e); onInput(e)}}\n      {...other}\n    >\n      {/* {contentValue?.map((node) => (\n        <div dangerouslySetInnerHTML={{ __html: node }} />\n      ))} */}\n    </Component>\n  )\n};\n\nexport default ContentEditable;"],"mappings":"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"},"metadata":{},"sourceType":"module"}