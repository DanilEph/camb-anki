{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Documents/my-repository/web/cambridge-anki/extention/src/components/ContentEditable/ContentEditable.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport uniqid from 'uniqid';\nimport { getCaretPosition } from 'utils/helpers/getCaretPosition';\nimport { setCaretPosition } from 'utils/helpers/setCaretPosition';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst brId = uniqid('br-');\n\nconst ContentEditable = _ref => {\n  _s();\n\n  let {\n    contentValue,\n    id: oldId,\n    component,\n    onContentChange = () => {},\n    onInput = () => {},\n    ...other\n  } = _ref;\n  const Component = component || 'div';\n  const id = uniqid('content-editable-');\n  const [caret, setCaret] = useState();\n\n  const resetNodes = selector => {\n    const element = document.querySelector(selector);\n    if (element) element.innerHTML = '';\n  };\n\n  const setContent = (selector, newContent) => {\n    const element = document.querySelector(selector);\n\n    if (element && newContent) {\n      element.innerHTML = '';\n      newContent.forEach((node, i) => {\n        const wrapedNode = document.createElement('div');\n\n        if (node === brId) {\n          const br = document.createElement('br');\n          wrapedNode.append(br);\n        } else {\n          wrapedNode.innerHTML = node;\n        }\n\n        element.append(wrapedNode);\n      });\n      console.log('Childrens have been appended!');\n    } else if (element && !newContent) {\n      element.innerHTML = '';\n      console.log('Element has been cleaned');\n    }\n\n    setCaretPosition(`#${id}`, 10);\n  };\n\n  useEffect(() => {\n    setContent(`#${id}`, contentValue);\n  }, [contentValue]);\n\n  function handleChange(e) {\n    var _e$currentTarget$chil, _e$currentTarget$chil2, _e$currentTarget$chil3;\n\n    const imgMaxWidth = e.currentTarget.clientWidth - 30;\n    const allImg = e.currentTarget.getElementsByTagName('img');\n\n    for (let i = 0; i < allImg.length; i++) {\n      const img = allImg[i];\n      if (img.width > imgMaxWidth) img.width = imgMaxWidth;\n    }\n\n    let parsedNodes = [];\n    const firstText = ((_e$currentTarget$chil = e.currentTarget.childNodes[0]) === null || _e$currentTarget$chil === void 0 ? void 0 : _e$currentTarget$chil.nodeName) === '#text' ? (_e$currentTarget$chil2 = e.currentTarget.childNodes[0]) === null || _e$currentTarget$chil2 === void 0 ? void 0 : _e$currentTarget$chil2.textContent : undefined;\n    const firstImg = ((_e$currentTarget$chil3 = e.currentTarget.children[0]) === null || _e$currentTarget$chil3 === void 0 ? void 0 : _e$currentTarget$chil3.tagName) === 'IMG' ? e.currentTarget.getElementsByTagName('img')[0].outerHTML : undefined;\n    const nodes = e.currentTarget.getElementsByTagName('div');\n    firstImg && parsedNodes.push(firstImg);\n    firstText && parsedNodes.push(firstText);\n\n    for (let i = 0; i < nodes.length; i++) {\n      var _currentNode$children, _currentNode$children2;\n\n      const currentNode = nodes[i];\n      let imgs = [];\n      let text;\n      const caretPosition = getCaretPosition(currentNode);\n\n      if (caretPosition) {\n        setCaret({\n          nodeIndex: i,\n          caretPosition: caretPosition[0]\n        });\n      }\n\n      if (((_currentNode$children = currentNode.children[0]) === null || _currentNode$children === void 0 ? void 0 : _currentNode$children.tagName) === 'BR' && currentNode.childElementCount === 1) {\n        text = brId;\n      } else if (((_currentNode$children2 = currentNode.children[0]) === null || _currentNode$children2 === void 0 ? void 0 : _currentNode$children2.tagName) === 'IMG') {\n        const imgElements = currentNode.getElementsByTagName('img'); // img = (currentImg?.outerHTML);\n\n        for (let i = 0; i < imgElements.length; i++) {\n          const img = imgElements[i];\n          if (img.width > imgMaxWidth) img.width = imgMaxWidth;\n          imgs.push(img.outerHTML);\n        }\n      } else if (currentNode.textContent) {\n        text = currentNode.textContent;\n      }\n\n      parsedNodes = [...parsedNodes, ...imgs];\n      text && parsedNodes.push(text);\n    }\n\n    console.log(parsedNodes);\n    onContentChange(parsedNodes); // setContent(`#${id}`, contentValue);\n    // resetNodes(`#${id}`);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Component, {\n    id: id,\n    contentEditable: true,\n    onInput: e => {\n      handleChange(e);\n      onInput(e);\n    },\n    ...other\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContentEditable, \"srpdjg5aLWQyvvU+YWDOCWogmYk=\");\n\n_c = ContentEditable;\nexport default ContentEditable;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContentEditable\");","map":{"version":3,"names":["React","useEffect","useState","uniqid","getCaretPosition","setCaretPosition","brId","ContentEditable","contentValue","id","oldId","component","onContentChange","onInput","other","Component","caret","setCaret","resetNodes","selector","element","document","querySelector","innerHTML","setContent","newContent","forEach","node","i","wrapedNode","createElement","br","append","console","log","handleChange","e","imgMaxWidth","currentTarget","clientWidth","allImg","getElementsByTagName","length","img","width","parsedNodes","firstText","childNodes","nodeName","textContent","undefined","firstImg","children","tagName","outerHTML","nodes","push","currentNode","imgs","text","caretPosition","nodeIndex","childElementCount","imgElements"],"sources":["/Users/macbookpro/Documents/my-repository/web/cambridge-anki/extention/src/components/ContentEditable/ContentEditable.tsx"],"sourcesContent":["import React, { FC, ReactNode, useEffect, useRef, useState } from 'react';\nimport { Type } from 'typescript';\nimport uniqid from 'uniqid';\nimport ReactHTMLParser from 'react-html-parser';\nimport { getCaretPosition } from 'utils/helpers/getCaretPosition';\nimport { setCaretPosition } from 'utils/helpers/setCaretPosition';\nconst brId = uniqid('br-');\n\nexport type IContentEditableProps<T extends React.ElementType> = {\n  component?: T;\n  onContentChange?: (event: string[]) => void;\n  contentValue?: string[];\n} & React.ComponentPropsWithoutRef<T>;\n\nconst ContentEditable = <T extends React.ElementType = 'div',>({ contentValue, id: oldId, component, onContentChange = () => {}, onInput = () => {}, ...other }: IContentEditableProps<T>) => {\n  const Component = component || 'div';\n  const id = uniqid('content-editable-');\n  const [caret, setCaret] = useState<{nodeIndex: number, caretPosition: number} | undefined>();\n\n  const resetNodes = (selector: string) => {\n    const element = document.querySelector(selector);\n    if (element) element.innerHTML = '';\n  }\n\n  const setContent = (selector: string, newContent?: string[] | undefined) => {\n    const element = document.querySelector(selector);\n    if (element && newContent) {\n      element.innerHTML = '';\n      newContent.forEach((node, i) => {\n        const wrapedNode = document.createElement('div')\n        if (node === brId) {\n          const br = document.createElement('br');\n          wrapedNode.append(br);\n        } else {\n          wrapedNode.innerHTML = node;\n        }\n        element.append(wrapedNode);\n      })\n      console.log('Childrens have been appended!')\n    } else if (element && !newContent) {\n      element.innerHTML = '';\n      console.log('Element has been cleaned')\n    }\n    setCaretPosition(`#${id}`, 10);\n  }\n\n  useEffect(() => {\n    setContent(`#${id}`, contentValue);\n  }, [contentValue])\n\n  function handleChange(e: React.FormEvent<HTMLDivElement>) {\n    const imgMaxWidth = e.currentTarget.clientWidth - 30;\n    const allImg = e.currentTarget.getElementsByTagName('img');\n    for (let i = 0; i < allImg.length; i++) {\n      const img = allImg[i];\n      if (img.width > imgMaxWidth)\n        img.width = imgMaxWidth;\n    }\n\n    let parsedNodes: string[] = [];\n    const firstText = e.currentTarget.childNodes[0]?.nodeName === '#text' ? e.currentTarget.childNodes[0]?.textContent : undefined;\n    const firstImg = e.currentTarget.children[0]?.tagName === 'IMG' ? e.currentTarget.getElementsByTagName('img')[0].outerHTML : undefined;\n    const nodes = e.currentTarget.getElementsByTagName('div');\n\n    firstImg && parsedNodes.push(firstImg);\n    firstText && parsedNodes.push(firstText);\n\n    for (let i = 0; i < nodes.length; i++) {\n      const currentNode = nodes[i];\n      let imgs: string[] = [];\n      let text: string | undefined;\n\n      const caretPosition = getCaretPosition(currentNode);\n      if (caretPosition) {\n        setCaret({nodeIndex: i, caretPosition: caretPosition[0]})\n      }\n\n      if (currentNode.children[0]?.tagName === 'BR' && currentNode.childElementCount === 1) {\n        text = brId;\n      } else if (currentNode.children[0]?.tagName === 'IMG') {\n        const imgElements = currentNode.getElementsByTagName('img');\n        // img = (currentImg?.outerHTML);\n        for (let i = 0; i < imgElements.length; i++) {\n          const img = imgElements[i];\n          if (img.width > imgMaxWidth)\n            img.width = imgMaxWidth;\n          imgs.push(img.outerHTML);\n        }\n      } else if (currentNode.textContent) {\n        text = currentNode.textContent;\n      }\n      parsedNodes = [...parsedNodes, ...imgs];\n      text && parsedNodes.push(text);\n    }\n    console.log(parsedNodes);\n    onContentChange(parsedNodes);\n    // setContent(`#${id}`, contentValue);\n    // resetNodes(`#${id}`);\n  }\n\n  return (\n    <Component\n      id={id}\n      contentEditable\n      onInput={(e) => {handleChange(e); onInput(e)}}\n      {...other}\n    >\n      {/* {contentValue?.map((node) => (\n        <div dangerouslySetInnerHTML={{ __html: node }} />\n      ))} */}\n    </Component>\n  )\n};\n\nexport default ContentEditable;"],"mappings":";;;AAAA,OAAOA,KAAP,IAA+BC,SAA/B,EAAkDC,QAAlD,QAAkE,OAAlE;AAEA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,SAASC,gBAAT,QAAiC,gCAAjC;AACA,SAASC,gBAAT,QAAiC,gCAAjC;;AACA,MAAMC,IAAI,GAAGH,MAAM,CAAC,KAAD,CAAnB;;AAQA,MAAMI,eAAe,GAAG,QAAsK;EAAA;;EAAA,IAA/H;IAAEC,YAAF;IAAgBC,EAAE,EAAEC,KAApB;IAA2BC,SAA3B;IAAsCC,eAAe,GAAG,MAAM,CAAE,CAAhE;IAAkEC,OAAO,GAAG,MAAM,CAAE,CAApF;IAAsF,GAAGC;EAAzF,CAA+H;EAC5L,MAAMC,SAAS,GAAGJ,SAAS,IAAI,KAA/B;EACA,MAAMF,EAAE,GAAGN,MAAM,CAAC,mBAAD,CAAjB;EACA,MAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,EAAlC;;EAEA,MAAMgB,UAAU,GAAIC,QAAD,IAAsB;IACvC,MAAMC,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuBH,QAAvB,CAAhB;IACA,IAAIC,OAAJ,EAAaA,OAAO,CAACG,SAAR,GAAoB,EAApB;EACd,CAHD;;EAKA,MAAMC,UAAU,GAAG,CAACL,QAAD,EAAmBM,UAAnB,KAAyD;IAC1E,MAAML,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuBH,QAAvB,CAAhB;;IACA,IAAIC,OAAO,IAAIK,UAAf,EAA2B;MACzBL,OAAO,CAACG,SAAR,GAAoB,EAApB;MACAE,UAAU,CAACC,OAAX,CAAmB,CAACC,IAAD,EAAOC,CAAP,KAAa;QAC9B,MAAMC,UAAU,GAAGR,QAAQ,CAACS,aAAT,CAAuB,KAAvB,CAAnB;;QACA,IAAIH,IAAI,KAAKrB,IAAb,EAAmB;UACjB,MAAMyB,EAAE,GAAGV,QAAQ,CAACS,aAAT,CAAuB,IAAvB,CAAX;UACAD,UAAU,CAACG,MAAX,CAAkBD,EAAlB;QACD,CAHD,MAGO;UACLF,UAAU,CAACN,SAAX,GAAuBI,IAAvB;QACD;;QACDP,OAAO,CAACY,MAAR,CAAeH,UAAf;MACD,CATD;MAUAI,OAAO,CAACC,GAAR,CAAY,+BAAZ;IACD,CAbD,MAaO,IAAId,OAAO,IAAI,CAACK,UAAhB,EAA4B;MACjCL,OAAO,CAACG,SAAR,GAAoB,EAApB;MACAU,OAAO,CAACC,GAAR,CAAY,0BAAZ;IACD;;IACD7B,gBAAgB,CAAE,IAAGI,EAAG,EAAR,EAAW,EAAX,CAAhB;EACD,CApBD;;EAsBAR,SAAS,CAAC,MAAM;IACduB,UAAU,CAAE,IAAGf,EAAG,EAAR,EAAWD,YAAX,CAAV;EACD,CAFQ,EAEN,CAACA,YAAD,CAFM,CAAT;;EAIA,SAAS2B,YAAT,CAAsBC,CAAtB,EAA0D;IAAA;;IACxD,MAAMC,WAAW,GAAGD,CAAC,CAACE,aAAF,CAAgBC,WAAhB,GAA8B,EAAlD;IACA,MAAMC,MAAM,GAAGJ,CAAC,CAACE,aAAF,CAAgBG,oBAAhB,CAAqC,KAArC,CAAf;;IACA,KAAK,IAAIb,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGY,MAAM,CAACE,MAA3B,EAAmCd,CAAC,EAApC,EAAwC;MACtC,MAAMe,GAAG,GAAGH,MAAM,CAACZ,CAAD,CAAlB;MACA,IAAIe,GAAG,CAACC,KAAJ,GAAYP,WAAhB,EACEM,GAAG,CAACC,KAAJ,GAAYP,WAAZ;IACH;;IAED,IAAIQ,WAAqB,GAAG,EAA5B;IACA,MAAMC,SAAS,GAAG,0BAAAV,CAAC,CAACE,aAAF,CAAgBS,UAAhB,CAA2B,CAA3B,iFAA+BC,QAA/B,MAA4C,OAA5C,6BAAsDZ,CAAC,CAACE,aAAF,CAAgBS,UAAhB,CAA2B,CAA3B,CAAtD,2DAAsD,uBAA+BE,WAArF,GAAmGC,SAArH;IACA,MAAMC,QAAQ,GAAG,2BAAAf,CAAC,CAACE,aAAF,CAAgBc,QAAhB,CAAyB,CAAzB,mFAA6BC,OAA7B,MAAyC,KAAzC,GAAiDjB,CAAC,CAACE,aAAF,CAAgBG,oBAAhB,CAAqC,KAArC,EAA4C,CAA5C,EAA+Ca,SAAhG,GAA4GJ,SAA7H;IACA,MAAMK,KAAK,GAAGnB,CAAC,CAACE,aAAF,CAAgBG,oBAAhB,CAAqC,KAArC,CAAd;IAEAU,QAAQ,IAAIN,WAAW,CAACW,IAAZ,CAAiBL,QAAjB,CAAZ;IACAL,SAAS,IAAID,WAAW,CAACW,IAAZ,CAAiBV,SAAjB,CAAb;;IAEA,KAAK,IAAIlB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2B,KAAK,CAACb,MAA1B,EAAkCd,CAAC,EAAnC,EAAuC;MAAA;;MACrC,MAAM6B,WAAW,GAAGF,KAAK,CAAC3B,CAAD,CAAzB;MACA,IAAI8B,IAAc,GAAG,EAArB;MACA,IAAIC,IAAJ;MAEA,MAAMC,aAAa,GAAGxD,gBAAgB,CAACqD,WAAD,CAAtC;;MACA,IAAIG,aAAJ,EAAmB;QACjB3C,QAAQ,CAAC;UAAC4C,SAAS,EAAEjC,CAAZ;UAAegC,aAAa,EAAEA,aAAa,CAAC,CAAD;QAA3C,CAAD,CAAR;MACD;;MAED,IAAI,0BAAAH,WAAW,CAACL,QAAZ,CAAqB,CAArB,iFAAyBC,OAAzB,MAAqC,IAArC,IAA6CI,WAAW,CAACK,iBAAZ,KAAkC,CAAnF,EAAsF;QACpFH,IAAI,GAAGrD,IAAP;MACD,CAFD,MAEO,IAAI,2BAAAmD,WAAW,CAACL,QAAZ,CAAqB,CAArB,mFAAyBC,OAAzB,MAAqC,KAAzC,EAAgD;QACrD,MAAMU,WAAW,GAAGN,WAAW,CAAChB,oBAAZ,CAAiC,KAAjC,CAApB,CADqD,CAErD;;QACA,KAAK,IAAIb,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmC,WAAW,CAACrB,MAAhC,EAAwCd,CAAC,EAAzC,EAA6C;UAC3C,MAAMe,GAAG,GAAGoB,WAAW,CAACnC,CAAD,CAAvB;UACA,IAAIe,GAAG,CAACC,KAAJ,GAAYP,WAAhB,EACEM,GAAG,CAACC,KAAJ,GAAYP,WAAZ;UACFqB,IAAI,CAACF,IAAL,CAAUb,GAAG,CAACW,SAAd;QACD;MACF,CATM,MASA,IAAIG,WAAW,CAACR,WAAhB,EAA6B;QAClCU,IAAI,GAAGF,WAAW,CAACR,WAAnB;MACD;;MACDJ,WAAW,GAAG,CAAC,GAAGA,WAAJ,EAAiB,GAAGa,IAApB,CAAd;MACAC,IAAI,IAAId,WAAW,CAACW,IAAZ,CAAiBG,IAAjB,CAAR;IACD;;IACD1B,OAAO,CAACC,GAAR,CAAYW,WAAZ;IACAjC,eAAe,CAACiC,WAAD,CAAf,CA7CwD,CA8CxD;IACA;EACD;;EAED,oBACE,QAAC,SAAD;IACE,EAAE,EAAEpC,EADN;IAEE,eAAe,MAFjB;IAGE,OAAO,EAAG2B,CAAD,IAAO;MAACD,YAAY,CAACC,CAAD,CAAZ;MAAiBvB,OAAO,CAACuB,CAAD,CAAP;IAAW,CAH/C;IAAA,GAIMtB;EAJN;IAAA;IAAA;IAAA;EAAA,QADF;AAYD,CAlGD;;GAAMP,e;;KAAAA,e;AAoGN,eAAeA,eAAf"},"metadata":{},"sourceType":"module"}