{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Documents/my-repository/web/cambridge-anki/extention/src/components/UI/Typography/Typography.tsx\";\n\n/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { jsxDEV as _jsxDEV } from \"@emotion/react/jsx-dev-runtime\";\n;\nconst styles = {\n  'text': css({\n    margin: '10px 0',\n    fontWeight: 700,\n    fontSize: '16px'\n  }),\n  'h1': css({\n    fontWeight: 700,\n    fontSize: '32px',\n    margin: '0',\n    marginTop: '20px'\n  }),\n  'h2': css({})\n};\n\nconst Typography = _ref => {\n  let {\n    type = 'text',\n    css,\n    ...other\n  } = _ref;\n  let RenderNode;\n\n  switch (type) {\n    case 'h1':\n      RenderNode = props => _jsxDEV(\"h1\", { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 31\n      }, this);\n\n      break;\n\n    case 'h2':\n      RenderNode = props => _jsxDEV(\"h1\", { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 31\n      }, this);\n\n      break;\n\n    default:\n      RenderNode = props => _jsxDEV(\"p\", { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 31\n      }, this);\n\n      break;\n  }\n\n  return _jsxDEV(RenderNode, {\n    css: [styles[type], css],\n    ...other\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Typography;\nexport default Typography;\n\nvar _c;\n\n$RefreshReg$(_c, \"Typography\");","map":{"version":3,"names":["css","styles","margin","fontWeight","fontSize","marginTop","Typography","type","other","RenderNode","props"],"sources":["/Users/macbookpro/Documents/my-repository/web/cambridge-anki/extention/src/components/UI/Typography/Typography.tsx"],"sourcesContent":["/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { FC } from 'react';\n\ntype TypographyType = 'text' | 'h1' | 'h2';\n\ninterface ITypographyProps extends React.HTMLAttributes<HTMLElement> {\n  type?: TypographyType,\n  css?: {},\n};\n\nconst styles = {\n  'text': css({\n    margin: '10px 0',\n    fontWeight: 700,\n    fontSize: '16px'\n  }),\n  'h1': css({\n    fontWeight: 700,\n    fontSize: '32px',\n    margin: '0',\n    marginTop: '20px',\n  }),\n  'h2': css({\n\n  })\n}\n\nconst Typography: FC<ITypographyProps> = ({ type = 'text', css, ...other }) => {\n  \n  let RenderNode: FC<ITypographyProps>;\n  \n  switch (type) {\n    case 'h1':\n      RenderNode = (props) => <h1 {...props} />\n      break;\n    case 'h2': \n      RenderNode = (props) => <h1 {...props} />\n      break;\n    default:\n      RenderNode = (props) => <p {...props} />\n      break;\n  }\n\n  return (\n    <RenderNode\n      css={[\n        styles[type],\n        css\n      ]} \n      {...other}\n    />\n  )\n};\n\nexport default Typography;"],"mappings":";;AAAA;AACA,SAASA,GAAT,QAAoB,gBAApB;;AAQC;AAED,MAAMC,MAAM,GAAG;EACb,QAAQD,GAAG,CAAC;IACVE,MAAM,EAAE,QADE;IAEVC,UAAU,EAAE,GAFF;IAGVC,QAAQ,EAAE;EAHA,CAAD,CADE;EAMb,MAAMJ,GAAG,CAAC;IACRG,UAAU,EAAE,GADJ;IAERC,QAAQ,EAAE,MAFF;IAGRF,MAAM,EAAE,GAHA;IAIRG,SAAS,EAAE;EAJH,CAAD,CANI;EAYb,MAAML,GAAG,CAAC,EAAD;AAZI,CAAf;;AAiBA,MAAMM,UAAgC,GAAG,QAAsC;EAAA,IAArC;IAAEC,IAAI,GAAG,MAAT;IAAiBP,GAAjB;IAAsB,GAAGQ;EAAzB,CAAqC;EAE7E,IAAIC,UAAJ;;EAEA,QAAQF,IAAR;IACE,KAAK,IAAL;MACEE,UAAU,GAAIC,KAAD,IAAW,mBAAQA;MAAR;QAAA;QAAA;QAAA;MAAA,QAAxB;;MACA;;IACF,KAAK,IAAL;MACED,UAAU,GAAIC,KAAD,IAAW,mBAAQA;MAAR;QAAA;QAAA;QAAA;MAAA,QAAxB;;MACA;;IACF;MACED,UAAU,GAAIC,KAAD,IAAW,kBAAOA;MAAP;QAAA;QAAA;QAAA;MAAA,QAAxB;;MACA;EATJ;;EAYA,OACE,QAAC,UAAD;IACE,GAAG,EAAE,CACHT,MAAM,CAACM,IAAD,CADH,EAEHP,GAFG,CADP;IAAA,GAKMQ;EALN;IAAA;IAAA;IAAA;EAAA,QADF;AASD,CAzBD;;KAAMF,U;AA2BN,eAAeA,UAAf"},"metadata":{},"sourceType":"module"}